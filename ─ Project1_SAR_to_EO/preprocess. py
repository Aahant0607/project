import os
import torch
import torchvision.transforms.functional as TF
import rasterio
import numpy as np
from enum import Enum
from skimage.restoration import denoise_nl_means, estimate_sigma

# === Sentinel-2 Band Enum ===
class S2Bands(Enum):
    B02 = 2  # Blue
    B03 = 3  # Green
    B04 = 4  # Red
    B05 = 5  # Red Edge
    B08 = 8  # NIR
    B11 = 12  # SWIR

# === Band configs ===
EO_CONFIGS = {
    "EO_RGB": [S2Bands.B04, S2Bands.B03, S2Bands.B02],
    "EO_NIR_SWIR_RE": [S2Bands.B08, S2Bands.B11, S2Bands.B05],
    "EO_RGB_NIR": [S2Bands.B04, S2Bands.B03, S2Bands.B02, S2Bands.B08],
}

# === Utility Functions ===
def normalize_cycle_gan(tensor):
    return tensor * 2.0 - 1.0

def resize_torch(img_tensor, size=(256, 256)):
    return TF.resize(img_tensor.unsqueeze(0), size, interpolation=TF.InterpolationMode.BILINEAR).squeeze(0)

def denoise_nlm_torch(img_tensor, h_factor=1.15):
    img_np = img_tensor.cpu().numpy()
    sigma_est = np.mean(estimate_sigma(img_np, channel_axis=None))
    denoised = denoise_nl_means(img_np, h=h_factor * sigma_est, fast_mode=True, patch_size=5, patch_distance=6)
    return torch.from_numpy(denoised).float()

def process_patch(filepath, band_indices, apply_denoise=True):
    with rasterio.open(filepath) as src:
        img = src.read(band_indices).astype(np.float32)
    img_tensor = torch.from_numpy(img)

    bands = []
    for band in img_tensor:
        if apply_denoise:
            band = denoise_nlm_torch(band)
        band = resize_torch(band)
        band = band / 255.0
        band = normalize_cycle_gan(band)
        bands.append(band)

    return torch.stack(bands)

# === Main Preprocessing ===
def preprocess_dataset(s1_dir, s2_dir, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    rois = sorted([f for f in os.listdir(s1_dir) if f.startswith("s1_")])

    for i, roi_name in enumerate(rois):
        roi_number = f"{i+1:04d}"  # e.g., 0001, 0002...
        print(f" Processing ROI {roi_name} â†’ {roi_number}")

        s1_roi_path = os.path.join(s1_dir, roi_name)
        s2_roi_path = os.path.join(s2_dir, roi_name.replace("s1_", "s2_"))

        if not os.path.exists(s2_roi_path):
            print(f" EO folder missing: {s2_roi_path}")
            continue

        output_path = os.path.join(output_dir, roi_number)
        os.makedirs(output_path, exist_ok=True)

        # --- Process SAR ---
        sar_files = sorted([f for f in os.listdir(s1_roi_path) if f.endswith('.tif')])
        sar_path = os.path.join(s1_roi_path, sar_files[0])  # assumes 1 file
        sar_tensor = process_patch(sar_path, band_indices=[1, 2])
        torch.save(sar_tensor, os.path.join(output_path, "SAR.pt"))

        # --- Process EO for each config ---
        eo_files = sorted([f for f in os.listdir(s2_roi_path) if f.endswith('.tif')])
        eo_path = os.path.join(s2_roi_path, eo_files[0])  # assumes 1 file with all bands

        for config_name, bands in EO_CONFIGS.items():
            band_indices = [b.value for b in bands]
            eo_tensor = process_patch(eo_path, band_indices)
            torch.save(eo_tensor, os.path.join(output_path, f"{config_name}.pt"))

        print(f" Saved to: {output_path}\n")

    print(f"\n All ROIs processed. Output organized at: {output_dir}")

# === Run ===
if __name__ == "__main__":
    s1_folder = r"ROIs2017_winter_s1\ROIs2017_winter"
    s2_folder = r"ROIs2017_winter_s2\ROIs2017_winter"
    output_folder = "Preprocessed_Output"

    preprocess_dataset(s1_folder, s2_folder, output_folder)

#Link of preprocessed Dataset uploaded on Kaggle = "https://www.kaggle.com/datasets/aahantkumar/ak-new-cycle"
